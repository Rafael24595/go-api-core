name: Publish Release

on:
  workflow_dispatch:

permissions:
  contents: write 

jobs:
  block-non-main:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "🚫 Manual dispatch is only allowed from the 'main' branch."
          exit 1

  validate-version:
      needs: block-non-main
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest
      outputs:
        version: ${{ steps.check.outputs.version }}
      steps:
        - name: Install yq
          run: |
            sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
            sudo chmod +x /usr/bin/yq

        - name: Validate version format
          id: check
          run: |
            VERSION=$(yq '.project.version' go.package.yml)
            if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-z0-9\.-]+)?$ ]]; then
              echo "❌ Invalid version format: $VERSION"
              echo "✅ Expected format: v1.2.3 or v1.2.3-beta.1"
              exit 1
            fi
            echo "✅ Valid version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            
  build-and-release:
    needs: validate-version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.0'

      - name: Build the Go project
        run: |
          go mod tidy
          go build -o go-api-core
          tar -czf go-api-core.tar.gz go-api-core

      - name: Get version input
        id: get_version
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Push Git Tag
        run: |
           VERSION=${{ steps.get_version.outputs.version }}
           git config user.name "github-actions"
           git config user.email "github-actions@github.com"
           git tag $VERSION
           git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
           git push origin $VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}

      - name: Create GitHub Release
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          gh release create $VERSION go-api-core.tar.gz \
            --title "Release $VERSION" \
            --notes "Automated release of $VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
